# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    
    def forwards(self, orm):
        
        # Adding model 'Publisher'
        db.create_table('solutions_publisher', (
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('slug', self.gf('django.db.models.fields.CharField')(unique=True, max_length=100)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=255)),
        ))
        db.send_create_signal('solutions', ['Publisher'])

        # Adding model 'Author'
        db.create_table('solutions_author', (
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('slug', self.gf('django.db.models.fields.CharField')(unique=True, max_length=100)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=255)),
        ))
        db.send_create_signal('solutions', ['Author'])

        # Adding model 'Textbook'
        db.create_table('solutions_textbook', (
            ('publisher', self.gf('django.db.models.fields.related.ForeignKey')(related_name='textbooks', to=orm['solutions.Publisher'])),
            ('isbn', self.gf('django.db.models.fields.CharField')(max_length=13)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('slug', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('composite_slug', self.gf('django.db.models.fields.CharField')(unique=True, max_length=255, blank=True)),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('num_pages', self.gf('django.db.models.fields.IntegerField')()),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('year_published', self.gf('django.db.models.fields.IntegerField')(max_length=4)),
        ))
        db.send_create_signal('solutions', ['Textbook'])

        # Adding M2M table for field subjects on 'Textbook'
        db.create_table('solutions_textbook_subjects', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('textbook', models.ForeignKey(orm['solutions.textbook'], null=False)),
            ('subject', models.ForeignKey(orm['subjects.subject'], null=False))
        ))
        db.create_unique('solutions_textbook_subjects', ['textbook_id', 'subject_id'])

        # Adding M2M table for field authors on 'Textbook'
        db.create_table('solutions_textbook_authors', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('textbook', models.ForeignKey(orm['solutions.textbook'], null=False)),
            ('author', models.ForeignKey(orm['solutions.author'], null=False))
        ))
        db.create_unique('solutions_textbook_authors', ['textbook_id', 'author_id'])

        # Adding model 'TextbookExerciseGroup'
        db.create_table('solutions_textbookexercisegroup', (
            ('name', self.gf('django.db.models.fields.CharField')(max_length=20)),
            ('textbook', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['solutions.Textbook'])),
            ('slug', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('exercise_group', self.gf('django.db.models.fields.related.ForeignKey')(related_name='textbook_exercise_group', to=orm['solutions.ExerciseGroup'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
        ))
        db.send_create_signal('solutions', ['TextbookExerciseGroup'])

        # Adding model 'ExerciseGroup'
        db.create_table('solutions_exercisegroup', (
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=10)),
        ))
        db.send_create_signal('solutions', ['ExerciseGroup'])

        # Adding model 'Exercise'
        db.create_table('solutions_exercise', (
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('exercise_group', self.gf('django.db.models.fields.related.ForeignKey')(related_name='exercises', to=orm['solutions.ExerciseGroup'])),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=10)),
        ))
        db.send_create_signal('solutions', ['Exercise'])

        # Adding M2M table for field textbook_pages on 'Exercise'
        db.create_table('solutions_exercise_textbook_pages', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('exercise', models.ForeignKey(orm['solutions.exercise'], null=False)),
            ('textbookpage', models.ForeignKey(orm['solutions.textbookpage'], null=False))
        ))
        db.create_unique('solutions_exercise_textbook_pages', ['exercise_id', 'textbookpage_id'])

        # Adding model 'TextbookPage'
        db.create_table('solutions_textbookpage', (
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('textbook', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['solutions.Textbook'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=4)),
        ))
        db.send_create_signal('solutions', ['TextbookPage'])

        # Adding model 'Chapter'
        db.create_table('solutions_chapter', (
            ('description', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True)),
            ('textbook_exercise_group', self.gf('django.db.models.fields.related.ForeignKey')(related_name='chapter', to=orm['solutions.TextbookExerciseGroup'])),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=50)),
        ))
        db.send_create_signal('solutions', ['Chapter'])

        # Adding model 'Section'
        db.create_table('solutions_section', (
            ('chapter', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='sections', null=True, to=orm['solutions.Chapter'])),
            ('description', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True)),
            ('textbook_exercise_group', self.gf('django.db.models.fields.related.ForeignKey')(related_name='sections', to=orm['solutions.TextbookExerciseGroup'])),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=50)),
        ))
        db.send_create_signal('solutions', ['Section'])

        # Adding model 'Solution'
        db.create_table('solutions_solution', (
            ('votes_down', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('explanation', self.gf('django.db.models.fields.TextField')()),
            ('contributor', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('result', self.gf('django.db.models.fields.TextField')()),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('votes_up', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('exercise', self.gf('django.db.models.fields.related.ForeignKey')(related_name='solutions', to=orm['solutions.Exercise'])),
        ))
        db.send_create_signal('solutions', ['Solution'])

        # Adding unique constraint on 'Solution', fields ['exercise', 'contributor']
        db.create_unique('solutions_solution', ['exercise_id', 'contributor_id'])

        # Adding model 'SolutionVote'
        db.create_table('solutions_solutionvote', (
            ('up_or_down', self.gf('django.db.models.fields.BooleanField')(default=False, blank=True)),
            ('solution', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['solutions.Solution'])),
            ('created_on', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'])),
            ('modified_on', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
        ))
        db.send_create_signal('solutions', ['SolutionVote'])

        # Adding unique constraint on 'SolutionVote', fields ['solution', 'user']
        db.create_unique('solutions_solutionvote', ['solution_id', 'user_id'])

        #natural sort stuff
        db.execute(
            """
            begin;

set local check_function_bodies = false;

create or replace function ncompare3(integer,text,text)
returns integer language sql immutable
as $f$
  select case when $1 <> 0 then $1
              when $2='' and $3='' then 0
              else ncompare2(substring($2 from '^([^[:digit:]]*|[[:digit:]]*)'),$2,
                             substring($3 from '^([^[:digit:]]*|[[:digit:]]*)'),$3)
         end;
$f$
cost 1000;


create or replace function ncompare2(text,text,text,text)
returns integer language sql immutable
as $f$
  select case when $1 ~ '^[[:digit:]]+$' and $3 ~ '^[[:digit:]]+$'
              then ncompare3(numeric_cmp($1::numeric,$3::numeric),
                             substring($2 from 1+length($1)),
                             substring($4 from 1+length($3)))
              else ncompare3(bttextcmp($1,$3),
                             substring($2 from 1+length($1)),
                             substring($4 from 1+length($3)))
         end;
$f$

cost 1000;


create or replace function ncompare(text,text)
returns integer language sql immutable
as $f$
  select ncompare3(0,lower($1),lower($2));
$f$ 
cost 1000000;


create or replace function nlt(text,text)
returns boolean language sql immutable
as $f$
  select ncompare($1,$2) < 0;
$f$
cost 1000;


create or replace function nle(text,text)
returns boolean language sql immutable
as $f$
  select ncompare($1,$2) <= 0;
$f$
cost 1000;


create or replace function ngt(text,text)
returns boolean language sql immutable
as $f$
  select ncompare($1,$2) > 0;
$f$
cost 1000000000;


create or replace function nge(text,text)
returns boolean language sql immutable
as $f$
  select ncompare($1,$2) >= 0;
$f$
cost 1000;


create or replace function neq(text,text)
returns boolean language sql immutable
as $f$
  select ncompare($1,$2) = 0;
$f$ language sql immutable
cost 1000;


create operator <# (
  PROCEDURE = nlt, LEFTARG = text, RIGHTARG = text,
  COMMUTATOR = >#, NEGATOR = >=#
);



create operator <=# (
  PROCEDURE = nle, LEFTARG = text, RIGHTARG = text,
  COMMUTATOR = >=#, NEGATOR = >#
);



create operator =# (
  PROCEDURE = neq, LEFTARG = text, RIGHTARG = text,
  COMMUTATOR = =#
);



create operator ># (
  PROCEDURE = ngt, LEFTARG = text, RIGHTARG = text,
  COMMUTATOR = <#, NEGATOR = <=#
);


create operator >=# (
  PROCEDURE = ngt, LEFTARG = text, RIGHTARG = text,
  COMMUTATOR = <=#, NEGATOR = <#
);

create operator class naturalsort for type text using btree as
  operator 1 <#,
  operator 2 <=#,
  operator 3 =#,
  operator 4 >=#,
  operator 5 >#,
  function 1 ncompare(text,text);

commit;

drop operator  <# (text, text);
drop operator <=# (text, text);
drop operator  =# (text, text);
drop operator >=# (text, text);
drop operator  ># (text, text);



create index concurrently natural_exercises_name on solutions_exercise (name naturalsort);
create index concurrently natural_exercisegroup_name on solutions_textbookexercisegroup (textbook_id, name naturalsort);
create index concurrently natural_publisher_name on solutions_publisher (name naturalsort);
create index concurrently natural_author_name on solutions_author (name naturalsort);
create index concurrently natural_chapter_name on solutions_chapter (textbook_id, name naturalsort);
create index concurrently natural_section_name on solutions_section (textbook_id, name naturalsort);
create index concurrently natural_page_name on solutions_textbookpage (textbook_id, name naturalsort);
create index concurrently natural_textbook_title on solutions_textbook (title naturalsort);

""")

    
    
    def backwards(self, orm):
        
        # Deleting model 'Publisher'
        db.delete_table('solutions_publisher')

        # Deleting model 'Author'
        db.delete_table('solutions_author')

        # Deleting model 'Textbook'
        db.delete_table('solutions_textbook')

        # Removing M2M table for field subjects on 'Textbook'
        db.delete_table('solutions_textbook_subjects')

        # Removing M2M table for field authors on 'Textbook'
        db.delete_table('solutions_textbook_authors')

        # Deleting model 'TextbookExerciseGroup'
        db.delete_table('solutions_textbookexercisegroup')

        # Deleting model 'ExerciseGroup'
        db.delete_table('solutions_exercisegroup')

        # Deleting model 'Exercise'
        db.delete_table('solutions_exercise')

        # Removing M2M table for field textbook_pages on 'Exercise'
        db.delete_table('solutions_exercise_textbook_pages')

        # Deleting model 'TextbookPage'
        db.delete_table('solutions_textbookpage')

        # Deleting model 'Chapter'
        db.delete_table('solutions_chapter')

        # Deleting model 'Section'
        db.delete_table('solutions_section')

        # Deleting model 'Solution'
        db.delete_table('solutions_solution')

        # Removing unique constraint on 'Solution', fields ['exercise', 'contributor']
        db.delete_unique('solutions_solution', ['exercise_id', 'contributor_id'])

        # Deleting model 'SolutionVote'
        db.delete_table('solutions_solutionvote')

        # Removing unique constraint on 'SolutionVote', fields ['solution', 'user']
        db.delete_unique('solutions_solutionvote', ['solution_id', 'user_id'])
    
    
    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'solutions.author': {
            'Meta': {'object_name': 'Author'},
            'created_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'solutions.chapter': {
            'Meta': {'object_name': 'Chapter'},
            'created_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'textbook_exercise_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'chapter'", 'to': "orm['solutions.TextbookExerciseGroup']"})
        },
        'solutions.exercise': {
            'Meta': {'object_name': 'Exercise'},
            'created_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'exercise_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'exercises'", 'to': "orm['solutions.ExerciseGroup']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '10'}),
            'textbook_pages': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'exercises'", 'to': "orm['solutions.TextbookPage']"})
        },
        'solutions.exercisegroup': {
            'Meta': {'object_name': 'ExerciseGroup'},
            'created_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'solutions.publisher': {
            'Meta': {'object_name': 'Publisher'},
            'created_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'solutions.section': {
            'Meta': {'object_name': 'Section'},
            'chapter': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sections'", 'null': 'True', 'to': "orm['solutions.Chapter']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'textbook_exercise_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sections'", 'to': "orm['solutions.TextbookExerciseGroup']"})
        },
        'solutions.solution': {
            'Meta': {'unique_together': "(('exercise', 'contributor'),)", 'object_name': 'Solution'},
            'contributor': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'exercise': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'solutions'", 'to': "orm['solutions.Exercise']"}),
            'explanation': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'result': ('django.db.models.fields.TextField', [], {}),
            'votes_down': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'votes_up': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'solutions.solutionvote': {
            'Meta': {'unique_together': "(('solution', 'user'),)", 'object_name': 'SolutionVote'},
            'created_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'solution': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['solutions.Solution']"}),
            'up_or_down': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'solutions.textbook': {
            'Meta': {'object_name': 'Textbook'},
            'authors': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'textbooks'", 'blank': 'True', 'to': "orm['solutions.Author']"}),
            'composite_slug': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255', 'blank': 'True'}),
            'created_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'exercise_groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['solutions.ExerciseGroup']", 'through': "orm['solutions.TextbookExerciseGroup']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'isbn': ('django.db.models.fields.CharField', [], {'max_length': '13'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'num_pages': ('django.db.models.fields.IntegerField', [], {}),
            'publisher': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'textbooks'", 'to': "orm['solutions.Publisher']"}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'subjects': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'textbooks'", 'blank': 'True', 'to': "orm['subjects.Subject']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'year_published': ('django.db.models.fields.IntegerField', [], {'max_length': '4'})
        },
        'solutions.textbookexercisegroup': {
            'Meta': {'object_name': 'TextbookExerciseGroup'},
            'created_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'exercise_group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'textbook_exercise_group'", 'to': "orm['solutions.ExerciseGroup']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'textbook': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['solutions.Textbook']"})
        },
        'solutions.textbookpage': {
            'Meta': {'object_name': 'TextbookPage'},
            'created_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '4'}),
            'textbook': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['solutions.Textbook']"})
        },
        'subjects.subject': {
            'Meta': {'object_name': 'Subject'},
            'created_on': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'blank': 'True'}),
            'modified_on': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'ordering': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child'", 'null': 'True', 'to': "orm['subjects.Subject']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'})
        }
    }
    
    complete_apps = ['solutions']
