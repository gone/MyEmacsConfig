from django.contrib.auth.models import User
from django.contrib.localflavor.us.models import USStateField
from django.core.urlresolvers import resolve, reverse
from django.db import models, IntegrityError, transaction
from django.db.models import Q
from django.template.defaultfilters import slugify

from django_extensions.db.fields import AutoSlugField

from slader.common.models import AbstractBase
from slader.subjects.models import Subject


PUBPRIV_CHOICES = ( ('public', 'public'),
                    ('private', 'private'),
                    ('unknown', 'unknown'),
                    ('home', 'home'),
                  )


class School(AbstractBase):
    """ 
    A school where students attend, most likely a high school

    """

    name = models.CharField(max_length=255)
    city = models.CharField(max_length=255, blank=True)
    state = USStateField(blank=True)
    slug = AutoSlugField(max_length=150, populate_from=['city', 'state', 'name'], unique=True, editable=True)

    pop7 = models.IntegerField("7th grade population", default=0)
    pop8 = models.IntegerField("8th grade population", default=0)
    pop9 = models.IntegerField("9th grade population", default=0)
    pop10 = models.IntegerField("10th grade population", default=0)
    pop11 = models.IntegerField("11th grade population", default=0)
    pop12 = models.IntegerField("12th grade population", default=0)
    pop_total = models.IntegerField("Total population (7th-12th grades)", default=0)

    public_private = models.CharField(choices=PUBPRIV_CHOICES, max_length=7, default='unknown')
    requires_review = models.BooleanField(default=False)
    
    class Meta:
        app_label = 'demographics'
        unique_together = ('name', 'city', 'state',)

    def __unicode__(self):
        if self.city and self.state:
            city_state = '(%s, %s)' %(self.city, self.state)
        elif self.city:
            city_state = '(%s)' %self.city
        elif self.state:
            city_state = '(%s)' %self.state
        else:
            city_state = ''
        return '%s %s' %(self.name, city_state)

    def get_absolute_url(self):
        return reverse('schoolroom_school_detail', kwargs={'school_slug': self.slug})

    @property
    def active_users(self):
        return User.objects.filter(is_active=True, userprofile__high_school=self)

    def requesters(self):
        return User.objects.filter( Q(userprofile__high_school=self) | Q(school_request__school=self) ).distinct()
