import re
import os
import tempfile
from codecs import open

from slader.latex.utils import calc_cell_width


class LatexError(Exception):
    pass

class DviPngError(LatexError):
    pass

class BadLatexError(LatexError):
    pass

def __build_preamble(textwidth):
    preamble = []
    preamble.append('\documentclass[11pt]{article}')
    preamble.append("\usepackage{color,amssymb,amsmath,wasysym,textcomp,multicol,array,graphicx,arcs,polynom,cancel,enumerate,dcolumn}")
    preamble.append("\usepackage[none]{hyphenat}")
    if textwidth:
        preamble.append("\\textwidth %spt" % textwidth) # remember \t is tab...
    preamble.append("\pagestyle{empty}")
    preamble.append("\parindent=0pt")
    preamble.append('\\renewcommand{\\textdegree}{\ensuremath{^\circ}}') # remember \r is return...
    preamble.append("\\begin{document}") # \b is bell...
    return '\n'.join(preamble)

def __build_postamble():
    postamble = []
    postamble.append('\end{document}')
    return '\n'.join(postamble)


def __write_output(infile, outdir, workdir = '.', size = 1, outputfilename ="lateximg",):
    try:
        # Generate the DVI file
        latexcmd = 'latex -interaction=batchmode -output-directory %s %s'\
                % (workdir, infile)
        rc = os.system(latexcmd)
        # Something bad happened, abort
        if rc != 0:
            raise LatexError()

        # Convert the DVI file to PNG's
        dvifile = infile.replace('.tex', '.dvi')
        outprefix = os.path.join(outdir, outputfilename)
        dvicmd = "dvipng -T tight -x %i -z 9 -bg Transparent "\
                "-o %s %s" % (size * 1000, outprefix, dvifile)
        rc = os.system(dvicmd)
        if rc != 0:
            raise DviPngError()
    finally:
        # Cleanup temporaries
        basefile = infile.replace('.tex', '')
        tempext = [ '.aux', '.dvi', '.log' ]
        for te in tempext:
            tf = basefile + te
            if os.path.exists(tf):
                os.remove(tf)


def math2png(latex_content, prefix, outputfilename='lateximg', size = 1, textwidth=None):
    """
    Generate png images from latex snippets
    
    Parameters:
        latex_content - Latex as a string
        packages      - Optional list of packages to include in the LaTeX preamble
        prefix        - Optional prefix for output files
        size          - Scale factor for output
    """
    try:
        # Set the working directory
        workdir = tempfile.gettempdir()
        # Get a temporary file
        fd, texfile = tempfile.mkstemp('.tex', 'eq', workdir, True)
        # Create the TeX document
        with open(texfile, 'w+', 'utf-8') as f:
            latex_content = clean_latex(latex_content)
            f.write(__build_preamble(textwidth))
            f.write(latex_content)
            f.write(__build_postamble())

        __write_output(texfile, prefix, workdir, size, outputfilename,)
    finally:
        if os.path.exists(texfile):
            os.remove(texfile)
        os.close(fd)

def convert_data_cell(cell):
    latex = cell.latex
    dirpath, filepath = os.path.split(cell.get_absolute_image_file_path())
    if not os.path.exists(dirpath):
        try:
            os.makedirs(dirpath)
        except:
            
    try:
        if cell.get_column_width() > 1:
            textwidth = calc_cell_width(cell.get_column_width())
        else:
            textwidth = None
        math2png(latex, dirpath, filepath, textwidth=textwidth)
        if not cell.latex_image or cell.latex_image.path != cell.get_absolute_image_file_path():
            rel_path = re.sub("^%s" % cell.store.location, "", cell.get_absolute_image_file_path())
            cell.latex_image = rel_path
            cell.save()
    except LatexError as e:
        raise e


def clean_latex(latex):
    """removes commands that would cause errors or open up holes
    todo: clean rather than validate"""
    badcommands = ["documentstyle"]
    for command in badcommands:
        if latex.count('\\' + command):
            raise BadLatexError()
    return latex
